apply plugin: 'idea'


subprojects {

    apply plugin: 'java'

    configurations.all {
        resolutionStrategy {
            failOnVersionConflict()
            forcedModules = [
                    'xml-apis:xml-apis:2.0.2'
                    , 'org.springframework:spring-core:4.1.0.RC1'
                    , 'net.sf.saxon:Saxon-HE:9.5.1-6'
                    , 'commons-io:commons-io:1.3.2'
                    , 'commons-logging:commons-logging:1.1.3'
                    , 'com.fasterxml.jackson.core:jackson-databind:2.4.0'
                    , 'org.springframework:spring-expression:4.0.5.RELEASE'
                    , 'org.springframework:spring-context:4.0.5.RELEASE'
                    , 'org.springframework:spring-beans:4.0.5.RELEASE'
                    , 'commons-codec:commons-codec:1.6'
                    , 'com.google.guava:guava:16.0'
                    , 'org.xerial.snappy:snappy-java:1.1.1-M1'
                    , 'org.slf4j:slf4j-api:1.7.7'
                    , 'org.yaml:snakeyaml:1.13'
                    , 'log4j:log4j:1.2.17'
                    , 'org.apache.cassandra:cassandra-all:2.1.0'
                    , 'org.apache.thrift:libthrift:0.9.1'
                    , 'org.apache.cassandra:cassandra-thrift:2.1.0'
                    , 'org.hibernate:hibernate-validator:5.0.3.Final'
                    , 'junit:junit:4.11'
                    , 'org.apache.httpcomponents:httpclient:4.2.5'
                    , 'com.netflix.archaius:archaius-core:0.5.12'
                    , 'org.codehaus.jackson:jackson-mapper-asl:1.9.11'
                    , 'org.codehaus.jackson:jackson-core-asl:1.9.11'
                    , 'xpp3:xpp3_min:1.1.4c'
                    , 'commons-lang:commons-lang:2.6'
                    , 'org.springframework:spring-test:4.0.3.RELEASE'
                    , 'com.fasterxml.jackson.core:jackson-core:2.4.0'
                    , 'com.fasterxml.jackson.core:jackson-annotations:2.4.0'
                    , 'com.datastax.cassandra:cassandra-driver-core:2.1.0'
                    , 'org.slf4j:slf4j-log4j12:1.7.7'
                    , 'commons-cli:commons-cli:1.2'
            ]
        }
    }

    def localEnv = new Properties();
    localEnv.load(new FileInputStream(file("${projectDir}/../env/local.properties")))

    repositories {
        mavenCentral()
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/libs-snapshot" }
        maven { url "http://repo.spring.io/milestone" }
    }

    task checkStyle(type: Checkstyle) {
        configFile file("${project.projectDir}/../config/checkstyle/checkstyle.xml")
    }

    test {
        environment localEnv
    }

    task stopMockClientIndex(type: Exec) {
        commandLine 'bash', '-c', "ps aux | grep wiremock | awk '{print \$2}' | head -1 | xargs -n 1 kill -9 \$1"
        ignoreExitValue true
    }

    jar.dependsOn 'checkStyle'
}

ext.libraries = [
        spring_framework     : "org.springframework:spring-core:4.1.0.RC1",
        spring_boot_logging  : "org.springframework.boot:spring-boot-starter-log4j:1.1.1.RELEASE",
        spring_data_cassandra: "org.springframework.data:spring-data-cassandra:1.0.0.RELEASE",
        mutagen_cassandra    : "com.toddfast.mutagen:mutagen-cassandra:0.4.0",
        snappy               : 'org.xerial.snappy:snappy-java:1.1.1-M1',
        commons_codec        : 'commons-codec:commons-codec:1.3',
        gson                 : 'com.google.code.gson:gson:2.2.4',
        xpp3                 : 'xpp3:xpp3_min:1.1.3.4.O',
        saxen                : 'net.sf.saxon:Saxon-HE:9.4',
        xmlpull              : 'xmlpull:xmlpull:1.1.3.1',
        apache_commons_io    : 'org.apache.commons:commons-io:1.3.2',
        fhir_validator       : 'me.fhir:fhir-dstu1:0.0.81.2489',
        jackson              : 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.4.0',
        saxon                : 'net.sf.saxon:Saxon-HE:9.5.1-6',
        rxjava               : 'com.netflix.rxjava:rxjava-core:0.17.5',
        future_converter     : 'net.javacrumbs.future-converter:spring-rxjava:0.0.2'
]

ext.testLibraries = [
        junit         : "junit:junit:4.10",
        mockito       : "org.mockito:mockito-all:1.8.4",
        spring_test   : "org.springframework:spring-test:4.0.3.RELEASE",
        cassandra_unit: "org.cassandraunit:cassandra-unit-spring:2.0.2.2-SNAPSHOT",
        wiremock      : "com.github.tomakehurst:wiremock:1.43"
]

def getProcessBuilder() {
    Properties properties = new Properties();
    properties.load(new FileInputStream(file('env/local.properties')))
    def builder = new ProcessBuilder('./gradlew', 'run', '--debug', '--debug-jvm')
    builder.environment().putAll(properties)
    builder.redirectOutput(ProcessBuilder.Redirect.INHERIT)
    return builder
}

def exportEnvironmentVariablesToXML(defaults) {
    defaults.remove(defaults.envs)
    Properties environmentVariables = new Properties();
    environmentVariables.load(new FileInputStream(new File('env/local.properties')))
    defaults.append new NodeBuilder().envs() {
        environmentVariables.each { prop, value ->
            env(name: prop, value: value)
        }
    }
}

task runSHR << {
    ProcessBuilder builder = getProcessBuilder()
    Process process = builder.start();
    process.waitFor();
}

idea {
    workspace {
        iws.withXml { xmlFile ->
            def runManager = xmlFile.asNode().component.find { it.@name == 'RunManager' }
            def junitDefaults = runManager.configuration.find { it.@default == 'true' && it.@type == 'JUnit' }
            junitDefaults.remove(junitDefaults.envs)
            junitDefaults.append new NodeBuilder().envs() {
                env(name: 'PATH_TO_CONFIG', value: "\$PROJECT_DIR\$/env/local.properties")
            }
            /*Configuring application runtime parameters*/
            exportEnvironmentVariablesToXML(runManager.configuration.find {
                it.@default == 'true' && it.@type == 'Application'
            });
        }
    }
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.netflix.astyanax:astyanax:1.56.48'
    }
}
