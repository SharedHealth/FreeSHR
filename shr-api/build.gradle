import groovy.io.FileType
import groovy.json.JsonSlurper

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'war'

def slurper = new JsonSlurper();
def wireMockPort = '9999'

dependencies {
    compile libraries.spring_boot, project(":shr")
    testCompile testLibraries.mockito, testLibraries.junit, testLibraries.spring_test
}

jar {
    baseName = 'bdeshr-api'
    version = '0.1-SNAPSHOT'
}

war {
    manifest {
        attributes('Main-Class': 'launch.Main')
    }
}

task startMockClientIndex << {
    ProcessBuilder builder = new ProcessBuilder('java', '-jar', "${projectDir}/lib/wiremock.jar", '--port', wireMockPort, '&');
    builder.start();
}

startMockClientIndex.doLast {
    uploadConfig(wireMockPort, slurper)
}

/*Upload all the config files in build config to mock server*/

def uploadConfig(wireMockPort, slurper) {
    def files = []
    def pathToConfigs = new File("${projectDir}/mock")
    pathToConfigs.eachFileRecurse(FileType.FILES) { file ->
        files << file
    }
    files.each {
        def name = it.getName() - 'upload'
        tasks.create(name: 'upload' + it.getName(), type: org._10ne.gradle.rest.RestTask) {
            httpMethod = 'post'
            uri = 'http://localhost:' + wireMockPort + '/__admin/mappings/new'
            requestBody = slurper.parse(new InputStreamReader(new FileInputStream(file('mock/' + name)), 'UTF-8'))
            contentType = groovyx.net.http.ContentType.JSON
        }
        tasks['upload' + it.getName()].execute();
    }
}

buildscript {
    repositories {
        mavenCentral()
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url 'http://dl.bintray.com/content/noamt/gradle-plugins' }
    }
    dependencies {
        classpath(
                "org.springframework.boot:spring-boot-gradle-plugin:1.0.2.BUILD-SNAPSHOT",
                "org._10ne.gradle:rest-gradle-plugin:0.1+"
        )
    }
}

