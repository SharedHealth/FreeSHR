import groovy.io.FileType
import groovy.json.JsonSlurper
import groovyx.net.http.ContentType
import org._10ne.gradle.rest.RestTask

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'war'
apply plugin: 'rpm'
apply plugin: 'idea'

def slurper = new JsonSlurper();
def wireMockPort = '9999'

dependencies {
    compile libraries.spring_boot, project(":shr")
    testCompile testLibraries.mockito, testLibraries.junit, testLibraries.spring_test
}

configurations {
    migration {
        extendsFrom compile
    }
}

configurations.migration.extendsFrom -= project(":shr")

jar {
    baseName = 'bdeshr-api'
    version = '0.1-SNAPSHOT'
}

task startMockClientIndex << {
    ProcessBuilder builder = new ProcessBuilder('java', '-jar', "${projectDir}/lib/wiremock.jar", '--port', wireMockPort, '&');
    builder.start();
}

startMockClientIndex.doLast {
    uploadConfig(wireMockPort, slurper)
}

/*Upload all the config files in build config to mock server*/

def uploadConfig(wireMockPort, slurper) {
    def files = []
    def pathToConfigs = new File("${projectDir}/mock")
    pathToConfigs.eachFileRecurse(FileType.FILES) { file ->
        files << file
    }
    files.each {
        config(it, wireMockPort, slurper)
    }
}

private void config(file, wireMockPort, slurper) {
    def name = file.getName() - 'upload'
    tasks.create(name: 'upload' + file.getName(), type: RestTask) {
        httpMethod = 'post'
        uri = 'http://localhost:' + wireMockPort + '/__admin/mappings/new'
        requestBody = slurper.parse(new InputStreamReader(new FileInputStream(new File("${projectDir}/mock/" + name)), 'UTF-8'))
        contentType = ContentType.JSON
    }
    tasks['upload' + file.getName()].execute();
}

private Properties loadConfig() {
    Properties properties = new Properties()
    properties.load(new FileInputStream(file("${projectDir}/../env/local.properties")));
    properties
}

task assembly(dependsOn: 'build') << {
    new File("${buildDir}/etc/").mkdir();
}

task exportProperties(dependsOn: 'assembly') << {
    PrintStream output = new PrintStream(new FileOutputStream(file("${buildDir}/etc/bdshr")));
    Properties properties = loadConfig()
    properties.each { prop, val ->
        output.println("export " + prop + "=" + val)
    }
}

task dist(dependsOn: 'exportProperties', type: Rpm) {
    packageName = 'shr'
    version = '0.1'
    release = 1
    arch = NOARCH
    os = LINUX

    into '/opt/bdshr'

    postInstall = file('scripts/utils/postInstall.sh')
    postUninstall = file('scripts/utils/postUninstall.sh')

    from("${buildDir}/etc") {
        fileMode = 0755
        createDirectoryEntry = true
        into 'etc'
    }

    from("scripts/rpm") {
        fileMode = 0755
        createDirectoryEntry = true
        exclude 'placeholder'
        into 'bin'
    }

    from("${buildDir}/libs") {
        fileMode = 0755
        createDirectoryEntry = true
        into 'lib'
    }

    from("scripts/rpm") {
        fileMode = 0755
        createDirectoryEntry = true
        exclude 'bdshr'
        into 'var'
    }

}

sourceSets {
    migrate {
        java {
            srcDir 'src/main/java/org/freeshr/web/launch/migration'
        }
        resources {
            srcDir 'src/main/resources'
        }
        compileClasspath += configurations.migration
    }
}

task migrateDatabase << {
    tasks.compileMigrateJava.execute()
    tasks.processMigrateResources.execute()
    tasks.applyDbMigrations.execute()
}

task applyDbMigrations(type: JavaExec) {
    workingDir=project.sourceSets.migrate.output.classesDir
    classpath(project.sourceSets.migrate.output.classesDir,project.sourceSets.migrate.output.resourcesDir, sourceSets.main.runtimeClasspath)
    main  "org.freeshr.web.launch.migration.Migrations"
    environment(loadConfig())
}

war {
    from sourceSets.migrate.resources
    manifest {
        attributes('Main-Class': 'launch.Main')
    }
}

buildscript {
    repositories {
        mavenCentral()
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url 'http://dl.bintray.com/content/noamt/gradle-plugins' }
    }
    dependencies {
        classpath(
                "org.springframework.boot:spring-boot-gradle-plugin:1.0.2.BUILD-SNAPSHOT",
                "org._10ne.gradle:rest-gradle-plugin:0.1+",
                'com.trigonic:gradle-rpm-plugin:1.4',
        )
    }
}

