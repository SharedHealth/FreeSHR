apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'war'
apply plugin: 'rpm'
apply plugin: 'idea'

mainClassName = "org.freeshr.launch.Main"

jar {
    baseName = 'bdeshr'
    version = '0.1-SNAPSHOT'
}

repositories {
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral()
}

test {
    testLogging {
        exceptionFormat "full" // default is "short"
    }
}

test.finalizedBy(stopMockClientIndex)

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web:1.1.1.RELEASE') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    compile libraries.snappy, libraries.spring_data_cassandra, libraries.spring_boot_logging,
            libraries.apache_commons_io, libraries.spring_framework, libraries.fhir_validator,
            libraries.jackson, libraries.saxon
    compile('io.netty:netty:3.9.0.Final') {
        force = 'true'
    }
    compile('com.toddfast.mutagen:mutagen-cassandra:0.4.0') {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
    compile project(":fhir")
    testCompile testLibraries.mockito, testLibraries.junit, testLibraries.spring_test, testLibraries.cassandra_unit, testLibraries.wiremock
}

configurations.all {
    exclude group: 'org.jboss.netty', module: 'netty'
}

//build artifact
private Properties loadConfig() {
    Properties properties = new Properties()
    properties.load(new FileInputStream(file("${projectDir}/../env/local.properties")));
    properties
}

task assembly(dependsOn: 'build') << {
    new File("${buildDir}/etc/").mkdir();
}

task copyZip(type: Copy, dependsOn: 'assembly') {
    from 'src/main/resources/validation.zip'
    into 'build/etc/'
}

task exportProperties(dependsOn: 'copyZip') << {
    PrintStream output = new PrintStream(new FileOutputStream(file("${buildDir}/etc/bdshr")));
    Properties properties = loadConfig()
    properties.each { prop, val ->
        output.println("export " + prop + "=" + val)
    }
}

task dist(dependsOn: 'exportProperties', type: Rpm) {
    packageName = 'shr'
    version = '0.1'
    release = 1
    arch = NOARCH
    os = LINUX

    into '/opt/bdshr'

    postInstall = file('scripts/utils/postInstall.sh')
    preUninstall = file('scripts/utils/preUninstall.sh')
    postUninstall = file('scripts/utils/postUninstall.sh')

    from("${buildDir}/etc") {
        fileMode = 0755
        createDirectoryEntry = true
        into 'etc'
    }

    from("scripts/rpm") {
        fileMode = 0755
        createDirectoryEntry = true
        exclude 'placeholder'
        into 'bin'
    }

    from("${buildDir}/libs") {
        fileMode = 0755
        createDirectoryEntry = true
        into 'lib'
    }

    from("scripts/rpm") {
        fileMode = 0755
        createDirectoryEntry = true
        exclude 'bdshr'
        into 'var'
    }
}

war {
    from sourceSets.main.resources
    manifest {
        attributes('Main-Class': mainClassName)
    }
}

buildscript {
    repositories {
        mavenCentral()
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
        jcenter()
    }
    dependencies {
        classpath(
                "org.springframework.boot:spring-boot-gradle-plugin:1.0.2.BUILD-SNAPSHOT",
                'com.netflix.nebula:gradle-ospackage-plugin:1.9.1+'
        )
    }
}

